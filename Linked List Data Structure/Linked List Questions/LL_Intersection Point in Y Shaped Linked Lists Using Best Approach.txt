//{ Driver Code Starts
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

/* Link list Node */
struct Node {
    int data;
    struct Node* next;

    Node(int x) {
        data = x;
        next = NULL;
    }
};

// Function to take input as a vector of integers from a single line
vector<int> take() {
    vector<int> arr;
    string input;
    getline(cin, input);
    stringstream ss(input);
    int number;
    while (ss >> number) {
        arr.push_back(number);  // Add each number to the vector
    }
    return arr;
}

// Function to create a linked list from a vector of integers
Node* inputList(int size, vector<int> v) {
    if (size == 0)
        return NULL;

    int val = v[0];

    Node* head = new Node(val);  // Create the head node
    Node* tail = head;  // Tail points to the last node

    for (int i = 0; i < size - 1; i++) {
        val = v[i + 1];
        tail->next = new Node(val);  // Add new nodes to the linked list
        tail = tail->next;
    }

    return head;
}

// } Driver Code Ends

/* Linked List Node
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
}; */

class Solution {
  public:
    // Function to find intersection point in Y shaped Linked Lists.
    int intersectPoint(Node* head1, Node* head2) {
        
        if(head1 == nullptr || head2 == nullptr) return -1;  // If either list is empty, no intersection
        
        Node *t1 = head1, *t2 = head2;
        
        // Traverse both lists until they meet at the intersection point
        while(t1 != t2){
            
            t1 = t1->next;  // Move t1 to the next node
            t2 = t2->next;  // Move t2 to the next node
            
            if(t1 == t2) return t1->data;  // If they meet, return the data at the intersection
            
            if(t1 == nullptr) t1 = head2;  // If t1 reaches the end, reset to the head of the other list
            if(t2 == nullptr) t2 = head1;  // If t2 reaches the end, reset to the head of the other list
            
        }
        
        return -1;  // If no intersection is found, return -1
    }
};

//{ Driver Code Starts.

/* Driver program to test above function*/
int main() {
    srand(time(0));
    int T, n1, n2, n3;

    cin >> T;
    cin.ignore();
    while (T--) {

        vector<int> v1 = take();
        vector<int> v2 = take();
        vector<int> v3 = take();
        int n1 = v1.size(), n2 = v2.size(), n3 = v3.size();

        Node* head1 = NULL;
        Node* head2 = NULL;
        Node* common = NULL;

        head1 = inputList(n1, v1);  // Create first linked list
        head2 = inputList(n2, v2);  // Create second linked list
        common = inputList(n3, v3);  // Create the common linked list part

        Node* temp = head1;
        while (temp != NULL && temp->next != NULL)
            temp = temp->next;
        if (temp != NULL)
            temp->next = common;  // Attach the common part to the end of the first list

        temp = head2;
        while (temp != NULL && temp->next != NULL)
            temp = temp->next;
        if (temp != NULL)
            temp->next = common;  // Attach the common part to the end of the second list

        Solution ob;
        cout << ob.intersectPoint(head1, head2) << endl;  // Print the intersection point
    }
    return 0;
}

// } Driver Code Ends

/*
Analysis of the Code

Time Complexity:
- The `intersectPoint` function runs in O(N + M) time, where N and M are the lengths of the two linked lists.
  - Each list is traversed once, and the second traversal starts from the other list's head if no intersection is found in the first pass.

Space Complexity:
- The space complexity is O(1), as only a constant amount of extra memory is used for pointers.

This approach is efficient and leverages the fact that resetting pointers to the start of the other list helps find the intersection without requiring additional data structures.
*/
