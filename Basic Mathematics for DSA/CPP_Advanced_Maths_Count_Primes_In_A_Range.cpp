#include <bits/stdc++.h>
using namespace std;

class Solution
{
public:
  /**
   * @brief Generates a list of prime numbers up to N using the Sieve of Eratosthenes.
   *
   * This function creates a boolean vector where each index represents whether the index is a prime number.
   * The Sieve of Eratosthenes algorithm is used to efficiently find all primes up to N.
   *
   * @param N The upper limit up to which prime numbers are to be found.
   * @return A vector of integers where each index represents if it's a prime (1) or not (0).
   *
   * Time Complexity: O(N log(log N)) - Efficient for finding all primes up to N.
   * Space Complexity: O(N) - Space is used for the boolean vector to store primality information.
   */
  vector<int> primeSieve(int N)
  {
    vector<int> primes(N + 1, 1); // Initialize vector with all entries set to 1 (true)
    primes[0] = 0;                // 0 is not a prime number
    primes[1] = 0;                // 1 is not a prime number

    // Sieve of Eratosthenes to mark non-prime numbers
    for (int i = 2; i * i <= N; i++)
    {
      if (primes[i])
      { // If i is a prime number
        // Mark all multiples of i as non-prime
        for (int j = i * i; j <= N; j += i)
        {
          primes[j] = 0; // Mark multiples of i as non-prime
        }
      }
    }

    return primes; // Return the list of primes
  }

  /**
   * @brief Finds all prime numbers in the range [M, N].
   *
   * This function uses the list of prime numbers generated by `primeSieve` to find all primes in the given range.
   *
   * @param M The starting point of the range.
   * @param N The ending point of the range.
   * @return A vector of integers containing all prime numbers in the range [M, N].
   *
   * Time Complexity: O(N log(log N)) for sieve + O(N - M) for range checking.
   * Space Complexity: O(N) - Space used by the prime list and result list.
   */
  vector<int> primeRange(int M, int N)
  {
    vector<int> primeList = primeSieve(N); // Get all primes up to N
    vector<int> ans;

    // Iterate over the range [M, N] and collect primes
    for (int i = M; i <= N; i++)
    {
      if (primeList[i])
      {                   // Check if i is a prime
        ans.push_back(i); // Add prime to result list
      }
    }

    return ans; // Return the list of primes in the range [M, N]
  }
};

// Driver Code
int main()
{
  int t;
  cin >> t; // Number of test cases
  while (t--)
  {
    int M, N;
    cin >> M >> N; // Input range [M, N]
    Solution ob;
    vector<int> ans = ob.primeRange(M, N); // Find primes in the range [M, N]
    // Print all primes in the range
    for (auto u : ans)
      cout << u << " ";
    cout << "\n"; // Newline for each test case
  }
  return 0;
}

/**
 * Analysis:
 *
 * Problem Name: Find Prime Numbers in a Range
 *
 * Time Complexity:
 * - O(N log(log N)) for sieve generation where N is the upper limit for the Sieve of Eratosthenes.
 * - O(N - M) for checking the range [M, N] for primes. The time complexity for generating the sieve dominates the overall time complexity.
 *
 * Space Complexity:
 * - O(N) where N is the upper limit for the Sieve of Eratosthenes. This space is used for storing the primality of numbers up to N and the result list.
 */