class Solution {
  public:
    int longestSubarray(vector<int>& arr, int k) {
        // code here
        
        int n = arr.size();
        
        unordered_map<long long, int> prefixSumMap;
        
        int sum = 0, maxLen = INT_MIN;
        
        for(int i = 0; i < n; i++)
        {
            // Add the element to the sum
            sum += arr[i];
            
            // Check if the element formed the given sum
            if(sum == k)
            {
                maxLen = max(maxLen, i + 1);
            }
            
            // Lets calculate a remainder to find in the map
            
            int rem = sum - k;
            
            if(prefixSumMap.find(rem) != prefixSumMap.end())
            {
                // Possible occurrence of our given sum
                
                int len = i - prefixSumMap[rem];
                
                maxLen = max(maxLen, len);
            }
            
            // Add the calculated sum if not present in the array, act as a check for calculating remainder
            if(prefixSumMap.find(sum) == prefixSumMap.end())
            {
                prefixSumMap[sum] = i;
            }
        }
        
        return maxLen != INT_MIN ? maxLen : 0;
        
    }
};